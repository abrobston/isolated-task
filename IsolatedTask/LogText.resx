<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Assembly" xml:space="preserve">
    <value>assembly</value>
  </data>
  <data name="ErrorAssemblyLoadFailed" xml:space="preserve">
    <value>Loading assembly with name '{0}' into the AppDomain '{1}' with BaseDirectory '{2}' failed.  See subsequent exception.</value>
  </data>
  <data name="ErrorAssemblyNameOrFileMustBeSet" xml:space="preserve">
    <value>Either AssemblyName or AssemblyFile must be set.</value>
  </data>
  <data name="ErrorCannotConvertFromString" xml:space="preserve">
    <value>Parameter '{0}' is of type '{1}', which cannot be converted from string (or its elements cannot).  The parameter is required, so this is an error.</value>
  </data>
  <data name="ErrorConversionFailed" xml:space="preserve">
    <value>Conversion from string to {0} failed for parameter '{1}'.  Property value was '{2}'.  The parameter is required, so this is an error.</value>
  </data>
  <data name="ErrorInnerTaskFailed" xml:space="preserve">
    <value>Inner task '{0}' in assembly '{1}' failed.  There are probably other error messages.</value>
  </data>
  <data name="ErrorMissingRequiredParameter" xml:space="preserve">
    <value>The parameter '{0}' is not of an array type, and it is marked with RequiredAttribute, but the parameter is not specified.</value>
  </data>
  <data name="ErrorOnlyOneCanBeSet" xml:space="preserve">
    <value>Either AssemblyName or AssemblyFile must be set, but not both.</value>
  </data>
  <data name="ErrorParameterNamesAndValuesMustHaveSameLength" xml:space="preserve">
    <value>ParameterNames has {0} element(s), but ParameterValues has {1} element(s).  The two arrays must be the same length.</value>
  </data>
  <data name="ErrorTypeIsAbstract" xml:space="preserve">
    <value>Type '{0}' in assembly '{1}' is an abstract type, not a concrete type.</value>
  </data>
  <data name="ErrorTypeIsInterface" xml:space="preserve">
    <value>Type '{0}' in assembly '{1}' is an interface, not a concrete type.</value>
  </data>
  <data name="ErrorTypeNotFound" xml:space="preserve">
    <value>Type '{0}' was not found in assembly '{1}'.</value>
  </data>
  <data name="ErrorTypeNotITask" xml:space="preserve">
    <value>Type '{0}' in assembly '{1}' does not implement Microsoft.Build.Framework.ITask from assembly '{2}'.</value>
  </data>
  <data name="ErrorUnableToResolveWithin" xml:space="preserve">
    <value>Unable to resolve {0} '{1}' from within {2}.</value>
  </data>
  <data name="MessageAssemblyLoadedFromFile" xml:space="preserve">
    <value>Assembly with name '{0}' loaded from file '{1}'</value>
  </data>
  <data name="MessageAssemblyLoadedFromName" xml:space="preserve">
    <value>Assembly loaded by name: '{0}'</value>
  </data>
  <data name="MessageSkippingHiddenProperty" xml:space="preserve">
    <value>Skipping parameter '{0}' declared in type '{1}' because it is hidden or overridden by a property with the same name in a more derived type.</value>
  </data>
  <data name="MessageUsingDefaultEmptyArray" xml:space="preserve">
    <value>Parameter '{0}' is an array type, but no value was specified.  Initializing with an empty array.</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>type</value>
  </data>
  <data name="WarningCannotConvertFromString" xml:space="preserve">
    <value>Parameter '{0}' is of type '{1}', which cannot be converted from string (or its elements cannot).  Skipping parameter.</value>
  </data>
  <data name="WarningConversionFailed" xml:space="preserve">
    <value>Conversion from string to {0} failed for parameter '{1}'.  Property value was '{2}'.  Skipping parameter.</value>
  </data>
</root>